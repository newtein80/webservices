<!DOCTYPE HTML>
<html>
<head>
    <title>스프링부트 웹서비스</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    {{!-- css와 js 호출 주소를 보면 /로 바로 시작하는데요. 
    SpringBoot는 기본적으로 src/main/resources/static은 URL에서 / 로 지정됩니다. 
    그래서 src/main/resources/static/js/..., src/main/resources/static/css/... 등은 URL로 호출시엔 도메인/js/..., 도메인/css/... 로 호출할 수 있습니다.

    여기서 css와 js의 위치가 서로 다릅니다. 
    css는 <head>에, js는 <body> 최하단에 두었습니다. 
    이렇게 하는 이유는 페이지 로딩속도를 높이기 위함입니다.

    HTML은 최상단에서부터 코드가 실행되기 때문에 head가 다 실행되고서야 body가 실행됩니다. 
    즉, head가 다 불러지지 않으면 사용자 쪽에선 백지 화면만 노출됩니다. 
    특히 js의 용량이 크면 클수록 body 부분의 실행이 늦어지기 때문에 js는 body 하단에 두어 화면이 다 그려진 뒤에 호출하는것이 좋습니다.

    반면 css는 화면을 그리는 역할을 하기 때문에 head에서 불러오는것이 좋습니다.

    추가로, bootstrap.js의 경우 jquery가 꼭 있어야만 하기 때문에 bootstrap보다 먼저 호출되도록 코드를 작성했습니다.
    보통 위와 같은 상황을 bootstrap.js가 jquery에 의존한다고 합니다. --}}

    <!--부트스트랩 css 추가-->
    <link rel="stylesheet" href="/css/lib/bootstrap.min.css">
</head>
<body>
    

    <h1>스프링부트로 시작하는 웹 서비스</h1>
    <p>$$$$</p>
    <p>https://www.youtube.com/watch?v=jhuWWLJHOBo&list=PLqaSEyuwXkSppQAjwjXZgKkjWbFoUdNXC&index=53</p>
    <p>http://millky.com/@origoni/post/1100?language=ko_kr</p>
    {{!-- Handlebars는 흔히 사용하시는 Freemarker, Velocity와 같은 서버 템플릿 엔진입니다. 
    JSP는 서버 템플릿 역할만 하지 않기 때문에 JSP와 완전히 똑같은 역할을 한다고 볼순 없지만, 순수하게 JSP를 View 용으로만 사용하실때는 똑같은 역할이라고 보시면 됩니다.

    결국 URL 요청시, 파라미터와 상태에 맞춰 적절한 HTML 화면을 생성해 전달하는 역할을 하는것으로 보시면 됩니다.

    Tip)
    JSP, Freemarker, Velocity가 몇년동안 업데이트가 안되고 있어 사실상 SpringBoot에선 권장하지 않는 템플릿엔진입니다. 
    (Freemarker는 프리뷰버전은 계속나오고 있는데 릴리즈버전이 2015년이 마지막입니다.) 
    현재까지도 꾸준하게 업데이트 되고 있는 템플릿 엔진은 Thymeleaf, Handlebars 이며 이 중 하나를 선택하시면 됩니다. 
    개인적으로는 Handlebars를 추천합니다. 
    (Spring 진영에선 Thymeleaf를 밀고 있습니다.) 
    (1) 문법이 다른 템플릿엔진보다 간단하고 
    (2) 로직 코드를 사용할 수 없어 View의 역할과 서버의 역할을 명확하게 제한할 수 있으며 
    (3) Handlebars.js와 Handlebars.java 2가지가 다 있어, 하나의 문법으로 클라이언트 템플릿/서버 템플릿을 모두 사용할 수 있습니다. 
    개인적으로 View 템플릿엔진은 View의 역할에만 충실하면 된다고 생각합니다. 
    너무 많은 기능을 제공하면 API와 View템플릿엔진, JS가 서로 로직을 나눠갖게 되어 유지보수하기가 굉장히 어렵습니다.

    https://github.com/allegro/handlebars-spring-boot-starter

    의존성 하나만 추가하면 기존에 다른 스타터 패키지와 마찬가지로 추가 설정없이 설치가 끝입니다. 
    다른 서버 템플릿 스타터 패키지와 마찬가지로 Handlebars도 기본 경로는 src/main/resources/templates가 됩니다.

    Tip) 
    스프링부트는 디폴트 설정이 굉장히 많습니다. 
    기존의 스프링처럼 개인이 하나하나 설정 코드를 다 작성할 필요가 없습니다. 
    스프링부트를 쓰면 많은 설정을 생략할 수 있습니다. 
    영상을 참고하셔서 이런 점들은 숙지하시면 좋을것 같습니다. 
    https://www.youtube.com/watch?v=52i6gHnS1_g

    Tip) 
    혹시 IntelliJ를 사용중이시라면 아래와 같이 Handlebars 플러그인을 설치하면 문법체크 등과 같이 많은 지원을 받을 수 있습니다. --}}

    <div class="col-md-12">
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#savePostsModal">글 등록</button>
        <br/>
        <br/>
        <!-- 목록 출력 영역 -->
        <table class="table table-horizontal table-bordered">
            <thead class="thead-strong">
                <tr>
                    <th>게시글번호</th>
                    <th>제목</th>
                    <th>작성자</th>
                    <th>최종수정일</th>
                </tr>
            </thead>
            <tbody id="tbody">
            {{#each posts}}
                <tr>
                    <td>{{id}}</td>
                    <td>{{title}}</td>
                    <td>{{author}}</td>
                    <td>{{modifiedDate}}</td>
                </tr>
            {{/each}}
            </tbody>
        </table>
    </div>

    <!-- Modal 영역 -->
    <div class="modal fade" id="savePostsModal" tabindex="-1" role="dialog" aria-labelledby="savePostsLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="savePostsLabel">게시글 등록</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="title">제목</label>
                            <input type="text" class="form-control" id="title" placeholder="제목을 입력하세요">
                        </div>
                        <div class="form-group">
                            <label for="author"> 작성자 </label>
                            <input type="text" class="form-control" id="author" placeholder="작성자를 입력하세요">
                        </div>
                        <div class="form-group">
                            <label for="content"> 내용 </label>
                            <textarea class="form-control" id="content" placeholder="내용을 입력하세요"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-primary" id="btn-save">등록</button>
                </div>
            </div>
        </div>
    </div>

    <!--부트스트랩 js, jquery 추가-->
    <script src="/js/lib/jquery.min.js"></script>
    <script src="/js/lib/bootstrap.min.js"></script>

    {{!-- Custom js 추가 --}}
    <script src="/js/app/mainh.js"></script>
</body>
</html>